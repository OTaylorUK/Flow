
// LEVEL 1: flow_wrap //
@mixin make-flow_wrap($padding-x: $flow_container-padding-x) {
	width: 100%;
	max-width: 100%;
	margin-right: auto;
	margin-left: auto;
	@include display_flex(row_wrap);

}

// LEVEL 2: flow_container // 
@mixin make-flow_container(){
	@include display_flex(column);
	margin-right: auto;
	margin-left: auto;
	padding-right: $flow_container-padding-x;
	padding-left: $flow_container-padding-x;
	flex: 1 0 auto;

}

@mixin make-fw-flow_container(){
	@include make-flow_container();
	padding-right: 0;
	padding-left: 0;
}

// BREAKPOINT //
@mixin vj_bp($name, $breakpoints, $bp_type: 'min') {
	@media only screen and (#{$bp_type}-width: bp-return($name, breakpoints)) {
		@content;
	}
}

@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
	$min: breakpoint-min($name, $breakpoints);

	@if $min {
		@media (min-width: $min) {
			@content;
		}
	}
	@else {
		@content;
	}
}
@mixin make-flow_container-max-widths_fw($max-widths: $flow_container-max-widths, $breakpoints: $grid-breakpoints) {

	@each $breakpoint, $flow_container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint, $breakpoints) {

			@if($breakpoint != xs){
				&[data-flow-direction="row"]{
					flex-flow: row;
				}
				&[data-flow-direction="row_wrap"]{
					flex-flow: row wrap;
				}
				&[data-flow-direction="column"]{
					flex-flow: column;
				}
			}
			max-width: 100%;
		}
	}
}

@mixin make-flow_container-max-widths($max-widths: $flow_container-max-widths, $breakpoints: $grid-breakpoints) {

	@each $breakpoint, $flow_container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint, $breakpoints) {

			@if($breakpoint != xs){
				&[data-flow-direction="row"]{
					flex-flow: row;
				}
				&[data-flow-direction="row_wrap"]{
					flex-flow: row wrap;
				}
				&[data-flow-direction="column"]{
					flex-flow: column;
				}
			}
			max-width: $flow_container-max-width;
		}
	}
}

@mixin make-content_stretch($max-widths: $flow_container-max-widths, $breakpoints: $grid-breakpoints) {

	@each $breakpoint, $flow_container-max-width in $max-widths {
		@include media-breakpoint-up($breakpoint, $breakpoints) {
				@if($breakpoint = xs){
					&[data-flow-position="stretch_right"],&[data-flow-position="stretch_left"]{
						.stretch_content{
							left:  -$flow_container-padding-x ;
							width: calc(100% + (calc(100vw - #{$flow_container-max-width})  ) / 2 + #{$flow_container-padding-x});
						}
					} 
				}
				@if($breakpoint != xs){
					&[data-flow-position="stretch_left"]{
						.stretch_content{
							left: calc(calc( (calc(100vw - #{$flow_container-max-width}) ) / -2 ) - #{$flow_container-padding-x} );
							right: 0;
							width: calc(100% + (calc(100vw - #{$flow_container-max-width})  ) / 2 + #{$flow_container-padding-x});

						}
					}
					&[data-flow-position="stretch_right"]{
						.stretch_content{
							left: 0;
							width: calc(100% + (calc(100vw - #{$flow_container-max-width})  ) / 2 + #{$flow_container-padding-x});
						}
					}
				}
		}
	} 
} 

@mixin dynamic_content_size(){
	@for $i from 1 through 100 {
	  &[data-flow-basis="#{$i}"]{
		// flex: 1 0 calc(#{$i} * 1%);
		min-width: calc(#{$i} * 1%);
	  }
	}
  }
   
  @mixin make-flow_content(){
	  @include display_flex(column);
	  flex: 0 1 auto; 
	  max-width: 100%;
  
	  // only works for % currently until attr() css selector added support
	  @include make-content_stretch();
	  .stretch_content{
		  z-index: 1;
		  position: relative;
		  overflow: visible; 
	  }
  
	  @include dynamic_content_size();
	  &[data-flow-basis="auto"]{ 
		  flex-basis: auto;
	  }
	  &[data-flow-basis="stretch"]{
		  flex: 1; 
	  }
  
  }
  
  @mixin make-flow_content-responsive($max-widths: $flow_container-max-widths, $breakpoints: $grid-breakpoints){
	  @each $breakpoint, $flow_container-max-width in $max-widths {
		  @include media-breakpoint-up($breakpoint, $breakpoints) {
  
			  @if($breakpoint != xs){
				  &[data-flow-direction="row"]{
					  flex-flow: row;
				  }
				  &[data-flow-direction="row_wrap"]{
					  flex-flow: row wrap;
				  }
				  &[data-flow-direction="column"]{
					  flex-flow: column;
				  }
			  }
			  max-width: 100%;
		  }
	  }
  }


// non - specific //

// FLEX //
@mixin flex_arg(
	$flow: row wrap,
	$align: normal,
	$justify: normal
	){
	flex-flow: $flow;
	align-items: $align;
	justify-content: $justify;
}

@mixin display_inline_flex($args...){
	display: inline-flex;
	@include flex_arg($args...);
	
}
@mixin display_flex($args...){
	display: flex;
	@include flex_arg($args...);
	
}